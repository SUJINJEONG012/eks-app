# name: app github actions with cicd

# on:
#   push:
#     branches: [ "main" ]
          
# permissions:
#   contents: write  # 'write' 권한을 부여하여 푸시가 가능하게 함
  
# jobs:
#   ci-cd:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
#       with:
#         repository: ${{ secrets.GIT_NAME }}/eks-app
#         ref: main
#         token: ${{ secrets.GIT_TOKEN }}

#     - name: Set up AWS Credentials
#       run: |
#         echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
#         echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
#         echo "AWS_REGION=ap-northeast-2" >> $GITHUB_ENV

#     - name: Log in to Amazon ECR
#       uses: aws-actions/amazon-ecr-login@v1
#       with:
#         registry-type: private  # 'public' for Amazon ECR Public, or leave it empty for private ECR

#     - name: Set up JDK 17
#       uses: actions/setup-java@v4
#       with:
#         java-version: '17'
#         distribution: 'temurin'
#         cache: maven

#     - name: Make application.properties
#       run: |
#         cd ./src/main/resources
#         touch ./application.properties
#         echo "${{ secrets.PROPERTIES }}" > ./application.properties
#       shell: bash

#     - name: Build with Maven
#       run: mvn -B -DskipTests package --file pom.xml

#     - name: Naming jar file
#       run: mv ./target/*.jar ./target/app.jar

#     - name: Check jar file
#       run: ls ./target

#     - uses: actions/upload-artifact@v4
#       with:
#         name: app
#         path: ./target/*.jar

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3
    
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     # Set ECR URI as an environment variable
#     - name: Set ECR URI
#       run: echo "ECR_URI=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}" >> $GITHUB_ENV

#     - name: Build and push to ECR
#       uses: docker/build-push-action@v6
#       with:
#         context: .
#         push: true
#         platforms: linux/arm64,linux/amd64  
#         tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ github.sha }}

#     - name: Set up Image
#       run: |
#         sed -i "s%image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:[A-z0-9]*%image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:${{ github.sha }}%" ./manifest/eks-app.yaml

#       # run: |
#       #     aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_URI
#       #     docker build -t $ECR_URI:latest .
#       #     docker push $ECR_URI:latest
        
#     - name: Commit and push Changes
#       env:
#         GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
#       run: |
#         git config --local user.email "${{ secrets.GIT_EMAIL }}"
#         git config --local user.name "${{ secrets.GIT_NAME }}"
#         git add .
#         git diff --cached --quiet || git commit -m "Update image to latest"
#         git push
name: App with Github Actions, ArgoCD

on:
  # workflow_dispatch
  push:
    branches:
      - main

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Make application.properties
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash

    - name: Build with Maven
      run: mvn -B -DskipTests package --file pom.xml
      
    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./target/*.jar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Update application image version for ArgoCD
      uses: actions/checkout@v4
      with:
        repository: ${{ secrets.G_USER }}/${{ secrets.G_REPOSITORY }}
        ref: main
        token: ${{ secrets.G_TOKEN }}

    - name: Set up Image
      run: |
        sed -i "s%image: ${{ secrets.AWS_ECR_ID }}.dkr.ecr.${{ secrets.AWS_ECR_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:[a-zA-Z0-9]*%image: ${{ secrets.AWS_ECR_ID }}.dkr.ecr.${{ secrets.AWS_ECR_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}%" ./manifest/eks-app.yaml

    - name: Commit and push changes
      run: |
        git config --local user.email "${{ secrets.G_USER_EMAIL }}"
        git config --local user.name "${{ secrets.G_USER }}"
        git add .
        git commit -m "Update application image version for ArgoCD"
        git push
